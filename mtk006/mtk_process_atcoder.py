# -*- coding: utf-8 -*-
"""mtk_process_atcoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ynMM0fu5_rL-P-KYIKjs0axuNXwAO5oo
"""

import requests
import json
import time
from bs4 import BeautifulSoup
import pandas as pd
import datetime

import plotly.express as px
import plotly.graph_objects as go

"""# コンテスト情報"""

contest_id = "ahc020"
problem_id = "ahc020_a"

contest_start = datetime.datetime(2023,6,11,15,0,0)
contest_end = datetime.datetime(2023,6,18,19,0,0)

"""# データ作成
コンテスト期間中の提出結果から、リストを作成
"""

df = pd.read_csv("submissions.csv", index_col = 0)
df.columns = ["名前","チーム名", "言語", "スコア", "提出日時", "実行時間"]
df.head()

"""## 個人ランキング"""

df_individual = df.loc[df.groupby("名前")["スコア"].idxmax()]
df_individual = df_individual.drop(columns = ["言語", "提出日時", "実行時間"])
df_individual.sort_values("スコア", ascending=False, inplace=True)
df_individual.reset_index(inplace=True, drop=True)
df_individual["順位"] = range(1,len(df_individual)+1)
df_individual = df_individual.reindex(columns = ["順位", "名前", "チーム名", "スコア"]) 
df_individual.head()

"""## チームランキング"""

df_team = df.loc[df.groupby("チーム名")["スコア"].idxmax()]
df_team = df_team.drop(columns = ["言語", "提出日時", "実行時間"])
df_team = df_team.reindex(columns = ["チーム名", "名前", "スコア"])
df_team.sort_values("スコア", ascending = False, inplace = True)
df_team.reset_index(inplace = True, drop = True)
df_team["順位"] = range(1,len(df_team)+1)
df_team = df_team.reindex(columns = ["順位", "チーム名", "名前", "スコア"]) 
df_team.head()

"""# グラフ作成

1.   縦軸：スコア、横軸：時間の折れ線グラフ（個人）
2.   縦軸：スコア、横軸：時間の折れ線グラフ（チーム）
3.   言語ごとのランキング
4.   スコアとレートの相関関係（アルゴ、ヒューリスティック）



"""

df_line_indv = df.sort_values("提出日時", ascending = True)
df_line_indv["スコア"] = df_line_indv.groupby("名前")["スコア"].cummax()

fig_individual = px.line(df_line_indv , x="提出日時", y="スコア", color="名前")
fig_individual.show()

df_line_team = df.sort_values("提出日時", ascending = True)
df_line_team["スコア"] = df_line_team.groupby("チーム名")["スコア"].cummax()

fig_team = px.line(df_line_team, x="提出日時", y="スコア", color="チーム名")
fig_team.show()

df_lang = df.replace("C++ (GCC 9.2.1)", "C++"
            ).replace("C++ (Clang 10.0.0)", "C++"
            ).replace("C++14", "C++"
            ).replace("C# (.NET Core 3.1.201)", "C#"
            ).replace("PyPy3 (7.3.0)", "Python"
            ).replace("Python (3.8.2)", "Python"
            ).replace("Rust (1.42.0)", "Rust"
            ).replace("Crystal (0.33.0)", "Crystal"
            ).replace("D (DMD 2.091.0)", "D"
            ).replace("D (LDC 1.20.1)", "D"
            ).replace("Common Lisp (SBCL 2.0.3)", "Common Lisp"
            ).replace("Java (OpenJDK 11.0.6)", "Java"
            )
df_lang = df_lang.loc[df_lang.groupby("名前")["スコア"].idxmax()]

fig_lang = px.box(df_lang, x="言語", y="スコア", points='all')
fig_lang.show()

"""df_rate = df.loc[df.groupby("名前")["スコア"].idxmax()]

layout = go.Layout(
    xaxis = dict(title="レート", range = [0,3001], dtick=500),   # rangeで範囲、dtick で区間幅
    yaxis = dict(title="スコア（対数）"))

fig_rate = go.Figure(layout = layout)
fig_rate.add_trace(go.Scatter(x = df_rate["アルゴレート"],
                              y = df_rate["スコア"],
                              mode = "markers",
                              name = "アルゴ"))
fig_rate.add_trace(go.Scatter(x = df_rate["ヒューリスティックレート"],
                              y = df_rate["スコア"],
                              mode = "markers",
                              name = "ヒューリスティック"))
fig_rate.update_yaxes(type="log")
fig_rate.show()

## HTMLで書き出し
"""

fig_individual.write_html("line_individual.html")
fig_team.write_html("line_team.html")
#fig_lang.write_html("box_lang.html")
#fig_rate.write_html("scatter_rate.html")

df_individual.to_html(border = 0,
                      classes = ["table", "table-striped", "table-hover"],
                      index = False,
                      justify = "left")

df_team.to_html(border = 0,
                classes = ["table", "table-striped", "table-hover"],
                index = False,
                justify = "left")